class Clock {
		private double slice;
		private double hours;
		private double minutes;
		private double seconds;
	public Clock (double slice) {
		this.slice = slice;
		this.hours = 0;
		this.minutes = 0;
		this.seconds = 0;
	}

	public double hours() {
		return this.hours;
	}

	public double minutes() {
		return this.minutes;
	}

	public double seconds () {
		return this.seconds;
	}

	public void tick () {
		this.seconds+= slice;
		while (this.seconds >= 60) {
			this.minutes++;
			this.seconds-= 60;
		}

		while (this.minutes >= 60) {
			this.hours++;
			this.minutes = 0;
		}
		while (this.hours >= 12) {
			this.hours = 0;
		}
	}

	public String toString () {
		return (int)this.hours + ":" + (int)this.minutes + ":" + this.seconds;
	}

	public double getMinuteAngle() {
		return this.minutes * 6 + this.seconds * 0.1;
	}

	public double getHourAngle() {
		return this.seconds * (0.5 / 60) + (this.minutes / 2) + this.hours * 30;
	}
}

class ClockSolver2 {
	public static void main(String[] args) {
		double slice = 60;
		double angle = 180;
		try {
			slice = Double.parseDouble(args[0]);
			angle = Double.parseDouble(args[1]);
		} catch (ArrayIndexOutOfBoundsException e) {
			System.err.println("No Arguments given");
		} catch (Exception e) {
			System.err.println(e);
		}

	Clock c = new Clock(slice);

	double sliceFactor = 5.5 / 60 * slice / 2;
	double highestAngle = 0;
	String highestTime = "";
	String otherTime = "";
	double otherAngle = 0;

	for (int i = 0; i < 43200 / slice; i++) {

		if ((Math.abs(c.getMinuteAngle() - c.getHourAngle()) >= angle - sliceFactor  && Math.abs(c.getMinuteAngle() - c.getHourAngle()) <= angle + sliceFactor) || 360 - (Math.abs(c.getMinuteAngle() - c.getHourAngle())) >= angle - sliceFactor  && 360 - (Math.abs(c.getMinuteAngle() - c.getHourAngle())) <= angle + sliceFactor) {
			if (highestAngle != 0) {
				System.out.println(highestTime + "     --->   " + highestAngle);
				otherAngle = 0;
				highestAngle = 0;
			}

			otherTime = highestTime;
			otherAngle = highestAngle;

			highestAngle = Math.abs(c.getMinuteAngle() - c.getHourAngle());
			highestTime = c.toString();

			if (Math.abs(angle - otherAngle) < Math.abs(angle - highestAngle)) {
				highestTime = otherTime;
				highestAngle = otherAngle;
			}
		} 
		c.tick();	
	} 

	System.out.println(highestTime + "     --->   " + highestAngle);
	System.out.println("Slice: " + slice);
	System.out.println("Slice Factor: " + sliceFactor);
	System.out.println("Clock: " + c);
	}
}
